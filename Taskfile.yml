version: '3'

vars:
  SILENT: true  # Global silence setting

tasks:
  default:
    desc: Show help information
    cmds:
      - task -l
    silent: true

  refresh:
    desc: Apply the system configuration
    cmds:
      - echo "Applying system configuration..."
      - darwin-rebuild switch --flake . --show-trace
      - echo "System configuration applied successfully"

  build:
    desc: Build the configuration without applying
    cmds:
      - echo "Building system configuration..."
      - darwin-rebuild build --flake .
      - echo "Build completed successfully"

  update-flake:
    desc: Update flake inputs
    cmds:
      - echo "Updating flake inputs..."
      - nix flake update
      - echo "Flake inputs updated successfully"

  clean:
    desc: Run garbage collection
    cmds:
      - echo "Running garbage collection..."
      - sudo nix-collect-garbage -d
      - echo "Garbage collection completed"

  test:
    desc: Run all tests
    cmds:
      - echo "Running test suite..."
      - task: test-smart-resize
      - task: nvim-run-local-headless
      - echo "All tests completed successfully"

  test-smart-resize:
    desc: Test the smart-resize functionality
    cmds:
      - echo "Testing smart-resize..."
      - ./tests/smart-resize-test.sh
      - echo "Smart-resize test completed"

  nvim-run-local:
    desc: Run Neovim with local configuration interactively
    silent: true
    vars:
      PERSISTENT_DIR: '/tmp/sysinit-nvim-persistent'
    cmds:
      - |
        if [ "{{.REUSE_RUNTIME}}" = "true" ]; then
          echo "> Using persistent runtime directory"
          sudo mkdir -p {{.PERSISTENT_DIR}}/nvim/lazy
          sudo chown -R $(id -u):$(id -g) {{.PERSISTENT_DIR}}
          sudo chmod -R 755 {{.PERSISTENT_DIR}}
          RUNTIME_DIR="{{.PERSISTENT_DIR}}"
        else
          RUNTIME_DIR=$(mktemp -d /tmp/nvim-runtime-XXXXXX)
          mkdir -p ${RUNTIME_DIR}/nvim/lazy
          chmod -R 755 ${RUNTIME_DIR}
        fi
      - >
        export NVIM_RUNTIME_DIR=${RUNTIME_DIR} &&
        cd {{.ROOT_DIR}}/modules/home/neovim &&
        nvim -u init.lua --cmd "set runtimepath+=${PWD}" {{.ROOT_DIR}}
      - |
        if [ "{{.REUSE_RUNTIME}}" != "true" ] && [ -d "${RUNTIME_DIR}" ]; then
          rm -rf ${RUNTIME_DIR}
        fi
    usage: |
      Run with persistent runtime directory:
        task nvim-run-local -- REUSE_RUNTIME=true
      Run with temporary runtime directory:
        task nvim-run-local

  nvim-run-docker:
    desc: Run Neovim configuration in a fresh Docker container
    cmds:
      - echo "Building Docker container to test Neovim configuration..."
      - docker build -t neovim-test -f Dockerfile.neovim .
      - echo "Running Neovim in container. Exit with :q"
      - >
        docker run --rm -it 
        -e TERM=xterm-256color 
        -e COLORTERM=truecolor 
        neovim-test
      - echo "Docker test completed"

  refresh-work:
    desc: Update and rebuild work sysinit configuration
    cmds:
      - |
        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "$WORK_SYSINIT" ]; then
          echo "Could not find work sysinit repository"
          exit 1
        fi
        echo "Refreshing work sysinit at $WORK_SYSINIT"
        cd "$WORK_SYSINIT" && \
        if ! nix flake update; then
          echo "Failed to update flake"
          exit 1
        fi && \
        if ! nix build; then
          echo "Failed to build configuration"
          exit 1
        fi && \
        if ! ./result/sw/bin/darwin-rebuild switch --flake .#default; then
          echo "Failed to apply configuration"
          exit 1
        fi && \
        echo "Work configuration refreshed successfully"

  setup:
    desc: Install prerequisites for sysinit
    cmds:
      - echo "Installing prerequisites..."
      - ./install-deps.sh
      - echo "Setup completed"

  uninstall-nix:
    desc: Completely uninstall Nix from the system
    cmds:
      - echo "Uninstalling Nix..."
      - ./uninstall-nix.sh
      - echo "Nix uninstalled"

  nvim-test-module:
    desc: Run interactive tests for a specific module
    silent: true
    vars:
      PERSISTENT_DIR: '/tmp/sysinit-nvim-persistent'
    cmds:
      - |
        RUNTIME_DIR=$(mktemp -d /tmp/nvim-runtime-XXXXXX)
        mkdir -p ${RUNTIME_DIR}/nvim/lazy
        chmod -R 755 ${RUNTIME_DIR}
      - echo "Starting interactive module test..."
      - >
        export NVIM_RUNTIME_DIR=${RUNTIME_DIR} &&
        cd {{.ROOT_DIR}}/modules/home/neovim &&
        nvim --headless -u init.lua --cmd "set runtimepath+=${PWD}" 
        -c "lua require('core.test').run_interactive_test('{{.CLI_ARGS}}')"
        -c "echo 'Use :TestPass <num> or :TestFail <num> to mark test results'"
      - echo "Test completed"
      - rm -rf $NVIM_RUNTIME_DIR

  nvim-health:
    desc: Run health checks for all modules
    silent: true
    vars:
      PERSISTENT_DIR: '/tmp/sysinit-nvim-persistent'
    cmds:
      - |
        RUNTIME_DIR=$(mktemp -d /tmp/nvim-runtime-XXXXXX)
        mkdir -p ${RUNTIME_DIR}/nvim/lazy
        chmod -R 755 ${RUNTIME_DIR}
      - echo "Running health checks..."
      - >
        export NVIM_RUNTIME_DIR=${RUNTIME_DIR} &&
        cd {{.ROOT_DIR}}/modules/home/neovim &&
        nvim --headless -u init.lua --cmd "set runtimepath+=${PWD}" 
        -c "lua for name in pairs(require('core.test').health_checks) do require('core.test').run_health_check(name) end"
        -c "checkhealth"
      - echo "Health checks completed"
      - rm -rf $NVIM_RUNTIME_DIR