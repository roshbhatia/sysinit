version: '3'

vars:
  INFO_COLOR: 87
  SUCCESS_COLOR: 212
  ERROR_COLOR: 196
  LOG_FUNCTIONS: |
    log_setup() {
      log_info() {
        echo -e "\033[38;5;${INFO_COLOR}mINFO:\033[0m $1"
      }
      log_debug() {
        echo -e "\033[38;5;${INFO_COLOR}mDEBUG:\033[0m $1"
      }
      log_error() {
        echo -e "\033[38;5;${ERROR_COLOR}mERROR:\033[0m $1"
      }
      log_success() {
        echo -e "\033[38;5;${SUCCESS_COLOR}mSUCCESS:\033[0m $1"
      }
    }

tasks:
  default:
    cmds:
      - task -l
    desc: Show help information
    silent: true

  # System Configuration
  nix:build:
    cmds:
      - |
        # Setup logging
        {{.LOG_FUNCTIONS}}
        log_setup "sysinit:build"
        
        log_info "Building system configuration..."
        
        if ! darwin-rebuild build --flake . 2>&1 | ./hack/stdin-window.sh; then
          log_error "Build failed"
          exit 1
        fi
        
        log_success "Build completed successfully"
    desc: Build the configuration without applying
    silent: true

  nix:clean:
    cmds:
      - |
        # Setup logging
        {{.LOG_FUNCTIONS}}
        log_setup "sysinit:clean"
        
        log_info "Running garbage collection..."
        
        if ! sudo nix-collect-garbage -d 2>&1 | ./hack/stdin-window.sh; then
          log_error "Garbage collection failed"
          exit 1
        fi
        
        log_success "Garbage collection completed"
    desc: Run garbage collection
    silent: true

  nix:refresh:
    deps: [nix:update:flake]
    cmds:
      - |
        # Setup logging
        {{.LOG_FUNCTIONS}}
        log_setup "sysinit:refresh"
        
        log_info "Applying system configuration..."

        log_debug "Committing changes..."
        git add -A
        git commit -m "chore: update configuration and regenerate lockfile" 2>&1 | ./hack/stdin-window.sh || true
        
        log_debug "Pushing changes..."
        git push 2>&1 | ./hack/stdin-window.sh || true

        if ! darwin-rebuild switch --flake . --show-trace 2>&1 | ./hack/stdin-window.sh; then
          log_error "Failed to apply configuration"
          exit 1
        fi

        log_success "System configuration applied successfully"
    desc: Apply the system configuration
    silent: true

  nix:refresh:work:
    cmds:
      - |
        # Setup logging
        {{.LOG_FUNCTIONS}}
        log_setup "sysinit:work"
        
        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)

        if [ -z "$WORK_SYSINIT" ]; then
          log_error "Could not find work sysinit repository"
          exit 1
        fi

        log_info "Working in: $WORK_SYSINIT"
        cd "$WORK_SYSINIT"

        log_debug "Updating flake..."
        if ! nix flake update 2>&1 | ./hack/stdin-window.sh; then
          log_error "Failed to update flake"
          exit 1
        fi

        log_debug "Running refresh..."
        if ! task refresh 2>&1 | ./hack/stdin-window.sh; then
          log_error "Failed to refresh work configuration"
          exit 1
        fi

        log_success "Work configuration refreshed successfully"
    desc: Update and rebuild work sysinit configuration
    silent: true

  nix:update:flake:
    cmds:
      - |
        # Setup logging
        {{.LOG_FUNCTIONS}}
        log_setup "sysinit:flake"
        
        log_info "Updating flake inputs..."
        
        if ! nix flake update 2>&1 | ./hack/stdin-window.sh; then
          log_error "Failed to update flake"
          exit 1
        fi
        
        log_success "Flake inputs updated successfully"
    desc: Update flake inputs
    silent: true

  # System Setup
  nix:install:
    cmds:
      - |
        # Setup logging
        {{.LOG_FUNCTIONS}}
        log_setup "sysinit:install"
        
        log_info "Installing prerequisites..."
        
        if ! ./hack/install-deps.sh 2>&1 | ./hack/stdin-window.sh; then
          log_error "Setup failed"
          exit 1
        fi
        
        log_success "Setup completed"
    desc: Install prerequisites for sysinit
    silent: true

  nix:uninstall:
    cmds:
      - |
        # Setup logging
        {{.LOG_FUNCTIONS}}
        log_setup "sysinit:uninstall"
        
        log_info "Uninstalling Nix..."
        
        if ! ./hack/uninstall-nix.sh 2>&1 | ./hack/stdin-window.sh; then
          log_error "Uninstall failed"
          exit 1
        fi
        
        log_success "Nix uninstalled successfully"
    desc: Completely uninstall Nix from the system
    silent: true

  # Neovim Tasks
  nvim:extract-nvim-commands: { cmds: [task -d modules/darwin/home/neovim nvim:extract-nvim-commands], silent: true }
  nvim:extract-vsc-commands: { cmds: [task -d modules/darwin/home/neovim nvim:extract-vsc-commands], silent: true }
  nvim:pull-docs: { cmds: [task -d modules/darwin/home/neovim nvim:pull-docs], silent: true }
  nvim:run-local-headless-isolated: { cmds: [task -d modules/darwin/home/neovim nvim:run-local-headless-isolated], silent: true }
  nvim:run-local-isolated: { cmds: [task -d modules/darwin/home/neovim nvim:run-local-isolated], silent: true }
  nvim:verify-vsc-commands: { cmds: [task -d modules/darwin/home/neovim nvim:verify-vsc-actions], silent: true }
