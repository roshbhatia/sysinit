version: '3'

tasks:
  default:
    desc: Show help information
    cmds:
      - task -l
    silent: true

  # Boostrap and teardown
  setup:
    desc: Install prerequisites for sysinit
    cmds:
      - echo "Installing prerequisites..."
      - ./hack/install-deps.sh
      - echo "Setup completed"
    silent: true

  perms:
    desc: Fix permissions for /nix and home directories using parallel processing
    vars:
      IGNORE_PATTERNS: &ignore_patterns
        - ".DS_Store"
        - ".git"
        - "*.lock"
        - "node_modules"
        - "OrbStack*"
    cmds:
      - |
        fix_permissions() {
          local dir="$1"
          local message="$2"
          shift 2
          local ignore_args=()
          
          # Add common ignore patterns
          for pattern in "${IGNORE_PATTERNS[@]}"; do
            ignore_args+=("-E" "$pattern")
          done
          
          # Add additional patterns if provided
          for pattern in "$@"; do
            ignore_args+=("-E" "$pattern")
          done
          
          echo "$message"
          fd . "$dir" -t f -t d "${ignore_args[@]}" --owner "!$USER" -x sudo chown -v "$USER:staff" {}
        }
        
        # Define common ignore patterns
        IGNORE_PATTERNS=({{range .IGNORE_PATTERNS}}"{{.}}" {{end}})
        
        # Fix permissions for each directory
        fix_permissions "/nix" "Fixing /nix permissions..."
        fix_permissions "/opt/homebrew/opt" "Fixing /opt/homebrew/opt permissions..."
        fix_permissions "$HOME" "Fixing home directory permissions..." "node_modules" ".git"
    silent: true

  uninstall-nix:
    desc: Completely uninstall Nix from the system
    cmds:
      - echo "Uninstalling Nix..."
      - ./hack/uninstall-nix.sh
      - echo "Nix uninstalled"
    silent: true

 # Installs
  build:
    desc: Build the configuration without applying
    cmds:
      - echo "Building system configuration..."
      - darwin-rebuild build --flake .
      - echo "Build completed successfully"
    silent: true

  update-flake:
    desc: Update flake inputs
    cmds:
      - echo "Updating flake inputs..."
      - nix flake update
      - echo "Flake inputs updated successfully"
    silent: true

  clean:
    desc: Run garbage collection
    cmds:
      - echo "Running garbage collection..."
      - sudo nix-collect-garbage -d
      - echo "Garbage collection completed"
    silent: true

  refresh:
    desc: Apply the system configuration
    cmds:
      - |
        echo "Updating flake inputs..." && \
        if ! nix flake update; then echo "Failed to update flake"; exit 1; fi && \
        # Commit all local changes, including lockfile
        git add -A && \
        git commit -m "chore: update configuration and regenerate lockfile" || true && \
        # Push changes (ignore push errors, e.g., SSL issues)
        git push || true && \
        echo "Applying system configuration..." && \
        if ! darwin-rebuild switch --flake . --show-trace; then echo "Failed to apply configuration"; exit 1; fi && \
        echo "System configuration applied successfully"
    silent: true

  refresh-work:
    desc: Update and rebuild work sysinit configuration
    cmds:
      - |
        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "$WORK_SYSINIT" ]; then
          echo "Could not find work sysinit repository"
          exit 1
        fi
        echo "Refreshing work sysinit at $WORK_SYSINIT"
        cd "$WORK_SYSINIT" && \
        if ! nix flake update; then
          echo "Failed to update flake"
          exit 1
        fi && \
        git add flake.lock && \
        git commit -m "chore(lockfile): regenerate lockfile" || true && \
        git push && \
        if ! nix build; then
          echo "Failed to build configuration"
          exit 1
        fi && \
        if ! task refresh; then
          echo "Failed to apply configuration"
          exit 1
        fi && \
        echo "Work configuration refreshed successfully"
    silent: true

  nvim:run-local-isolated:
    cmds:
      - task -d modules/darwin/home/neovim nvim:run-local-isolated
    silent: true

  nvim:run-local-headless-isolated:
    cmds:
      - task -d modules/darwin/home/neovim nvim:run-local-headless-isolated
    silent: true

  nvim:pull-docs:
    cmds:
      - task -d modules/darwin/home/neovim nvim:pull-docs
    silent: true

  nvim:verify-vsc-commands:
    cmds:
      - task -d modules/darwin/home/neovim nvim:verify-vsc-actions
    silent: true

  nvim:extract-vsc-commands:
    cmds:
      - task -d modules/darwin/home/neovim nvim:extract-vsc-commands
    silent: true

  nvim:extract-nvim-commands:
    cmds:
      - task -d modules/darwin/home/neovim nvim:extract-nvim-commands
    silent: true
