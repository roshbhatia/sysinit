version: "3"

vars:
  LOG_FUNCTIONS: |
    log_info() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1"
    }
    log_debug() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [DEBUG] $1"
    log_error() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1"
    }
    log_success() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [SUCCESS] $1"
    }

  SCRIPT_HEADER: |
    #!/usr/bin/env bash
    {{.LOG_FUNCTIONS}}
    UUID=$(uuidgen)
    log_info "Task ID: $UUID"

  LOG_DIR: "/tmp/log"
  LOG_PREFIX: "sysinit"

  START_MSG_TEMPLATE: "{{.TASK}}..."
  SUCCESS_MSG_TEMPLATE: "{{.TASK}} completed successfully"

tasks:
  default:
    cmds:
      - task -l
    desc: Show help information
    silent: true

  nix:build:
    vars:
      TASK: "Building system configuration"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-build.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        mkdir -p "$(dirname "{{.LOG_FILE}}")"
        touch "{{.LOG_FILE}}"
        if ! darwin-rebuild switch --flake . --show-trace --impure | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) > "{{.LOG_FILE}}" 2>&1; then
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        log_info "Log file: {{.LOG_FILE}}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Build the configuration without applying
    silent: true

  nix:clean:
    vars:
      TASK: "Running garbage collection"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-clean.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        mkdir -p "$(dirname "{{.LOG_FILE}}")"
        touch "{{.LOG_FILE}}"
        if ! sudo nix-collect-garbage -d | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) > "{{.LOG_FILE}}" 2>&1; then
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        log_info "Log file: {{.LOG_FILE}}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Run garbage collection
    silent: true

  nix:refresh:
    deps: [nix:update:flake]
    vars:
      TASK: "Applying system configuration"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-refresh.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        mkdir -p "$(dirname "{{.LOG_FILE}}")"
        touch "{{.LOG_FILE}}"
        git add -A | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) > "{{.LOG_FILE}}" 2>&1
        git commit -m "chore: update configuration and regenerate lockfile" | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) >> "{{.LOG_FILE}}" 2>&1 || true
        git push | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) >> "{{.LOG_FILE}}" 2>&1 || true
        if ! darwin-rebuild switch --flake . --show-trace | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) >> "{{.LOG_FILE}}" 2>&1; then
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        log_info "Log file: {{.LOG_FILE}}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Apply the system configuration
    silent: true

  nix:refresh:work:
    vars:
      TASK: "Refreshing work configuration"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-work-refresh.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        mkdir -p "$(dirname "{{.LOG_FILE}}")"
        touch "{{.LOG_FILE}}"
        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "$WORK_SYSINIT" ]; then
          log_error "Could not find work sysinit repository"
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        cd "$WORK_SYSINIT"
        nix flake update | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) > "{{.LOG_FILE}}" 2>&1
        if ! task refresh | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) >> "{{.LOG_FILE}}" 2>&1; then
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        log_info "Log file: {{.LOG_FILE}}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Update and rebuild work sysinit configuration
    silent: true

  nix:update:flake:
    vars:
      TASK: "Updating flake inputs"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-flake-update.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        mkdir -p "$(dirname "{{.LOG_FILE}}")"
        touch "{{.LOG_FILE}}"
        if ! nix flake update | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) > "{{.LOG_FILE}}" 2>&1; then
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        log_info "Log file: {{.LOG_FILE}}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Update flake inputs
    silent: true

  nix:install:nix:
    vars:
      TASK: "Installing prerequisites"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-install.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        mkdir -p "$(dirname "{{.LOG_FILE}}")"
        touch "{{.LOG_FILE}}"
        if ! ./hack/install-deps.sh | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) > "{{.LOG_FILE}}" 2>&1; then
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        log_info "Log file: {{.LOG_FILE}}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Install prerequisites for sysinit
    silent: true

  nix:uninstall:nix:
    vars:
      TASK: "Uninstalling Nix"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-uninstall.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        mkdir -p "$(dirname "{{.LOG_FILE}}")"
        touch "{{.LOG_FILE}}"
        if ! ./hack/uninstall-nix.sh | tee >({{.ROOT_DIR}}/hack/stdin-window.sh) > "{{.LOG_FILE}}" 2>&1; then
          log_error "Failed. See log: {{.LOG_FILE}}"
          log_error "Last 20 lines of log:"
          echo "------------------------------------------------------------"
          tail -n 20 "{{.LOG_FILE}}"
          echo "------------------------------------------------------------"
          exit 1
        fi
        log_info "Log file: {{.LOG_FILE}}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Completely uninstall Nix from the system
    silent: true

  nvim:extract-nvim-commands:
    cmds:
      - task -d modules/darwin/home/neovim nvim:extract-nvim-commands
    silent: true

  nvim:extract-vsc-commands:
    cmds:
      - task -d modules/darwin/home/neovim nvim:extract-vsc-commands
    silent: true

  nvim:pull-docs:
    cmds:
      - task -d modules/darwin/home/neovim nvim:pull-docs
    silent: true

  nvim:run-local-headless-isolated:
    cmds:
      - task -d modules/darwin/home/neovim nvim:run-local-headless-isolated
    silent: true

  nvim:run-local-isolated:
    cmds:
      - task -d modules/darwin/home/neovim nvim:run-local-isolated
    silent: true

  nvim:verify-vsc-commands:
    cmds:
      - task -d modules/darwin/home/neovim nvim:verify-vsc-actions
    silent: true

