version: '3'

vars:
  SUCCESS_STYLE: --foreground 212 --border normal --border-foreground 212 --align left --width 50 --margin "0 1" --padding "0 1"
  ERROR_STYLE: --foreground 196 --border normal --border-foreground 196 --align left --width 50 --margin "0 1" --padding "0 1"
  INFO_STYLE: --foreground 87 --border normal --border-foreground 87 --align left --width 50 --margin "0 1" --padding "0 1"

tasks:
  default:
    cmds:
      - task -l
    desc: Show help information
    silent: true

  # System Configuration
  nix:build:
    cmds:
      - gum style {{.INFO_STYLE}} "Building system configuration..."
      - |
        if ! gum spin --spinner dot --title "Running darwin-rebuild..." -- darwin-rebuild build --flake .; then
          gum style {{.ERROR_STYLE}} "Build failed"
          exit 1
        fi
      - gum style {{.SUCCESS_STYLE}} "Build completed successfully"
    desc: Build the configuration without applying
    silent: true

  nix:clean:
    cmds:
      - gum style {{.INFO_STYLE}} "Running garbage collection..."
      - |
        if ! gum spin --spinner dot --title "Collecting garbage..." -- sudo nix-collect-garbage -d; then
          gum style {{.ERROR_STYLE}} "Garbage collection failed"
          exit 1
        fi
      - gum style {{.SUCCESS_STYLE}} "Garbage collection completed"
    desc: Run garbage collection
    silent: true

  nix:refresh:
    deps: [nix:update:flake]
    cmds:
      - |
        gum style {{.INFO_STYLE}} "Applying system configuration..."

        git add -A
        git commit -m "chore: update configuration and regenerate lockfile" || true
        git push || true

        if ! gum spin --spinner dot --title "Running darwin-rebuild..." -- darwin-rebuild switch --flake . --show-trace; then
          gum style {{.ERROR_STYLE}} "Failed to apply configuration"
          exit 1
        fi

        gum style {{.SUCCESS_STYLE}} "System configuration applied successfully"
    desc: Apply the system configuration
    silent: true

  nix:refresh:work:
    cmds:
      - |
        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)

        if [ -z "$WORK_SYSINIT" ]; then
          gum style {{.ERROR_STYLE}} "Could not find work sysinit repository"
          exit 1
        fi

        gum style {{.INFO_STYLE}} "Working in: $WORK_SYSINIT"
        cd "$WORK_SYSINIT"

        if ! gum spin --spinner dot --title "Running nix flake update..." -- nix flake update; then
          gum style {{.ERROR_STYLE}} "Failed to update flake"
          exit 1
        fi

        if ! gum spin --spinner dot --title "Running refresh..." -- task refresh; then
          gum style {{.ERROR_STYLE}} "Failed to refresh work configuration"
          exit 1
        fi

        gum style {{.SUCCESS_STYLE}} "Work configuration refreshed successfully"
    desc: Update and rebuild work sysinit configuration
    silent: true

  nix:update:flake:
    cmds:
      - gum style {{.INFO_STYLE}} "Updating flake inputs..."
      - |
        if ! nix flake update 2>&1 | ./hack/stdin-window.sh; then
          gum style {{.ERROR_STYLE}} "Failed to update flake"
          exit 1
        fi
      - gum style {{.SUCCESS_STYLE}} "Flake inputs updated successfully"
    desc: Update flake inputs
    silent: true

  # System Setup
  nix:install:
    cmds:
      - gum style {{.INFO_STYLE}} "Installing prerequisites..."
      - |
        if ! ./hack/install-deps.sh 2>&1 | ./hack/stdin-window.sh; then
          gum style {{.ERROR_STYLE}} "Setup failed"
          exit 1
        fi
      - gum style {{.SUCCESS_STYLE}} "Setup completed"
    desc: Install prerequisites for sysinit
    silent: true

  nix:uninstall:
    cmds:
      - gum style {{.INFO_STYLE}} "Uninstalling Nix..."
      - |
        if ! ./hack/uninstall-nix.sh 2>&1 | ./hack/stdin-window.sh; then
          gum style {{.ERROR_STYLE}} "Uninstall failed"
          exit 1
        fi
      - gum style {{.SUCCESS_STYLE}} "Nix uninstalled successfully"
    desc: Completely uninstall Nix from the system
    silent: true

  # Neovim Tasks
  nvim:extract-nvim-commands: { cmds: [task -d modules/darwin/home/neovim nvim:extract-nvim-commands], silent: true }
  nvim:extract-vsc-commands: { cmds: [task -d modules/darwin/home/neovim nvim:extract-vsc-commands], silent: true }
  nvim:pull-docs: { cmds: [task -d modules/darwin/home/neovim nvim:pull-docs], silent: true }
  nvim:run-local-headless-isolated: { cmds: [task -d modules/darwin/home/neovim nvim:run-local-headless-isolated], silent: true }
  nvim:run-local-isolated: { cmds: [task -d modules/darwin/home/neovim nvim:run-local-isolated], silent: true }
  nvim:verify-vsc-commands: { cmds: [task -d modules/darwin/home/neovim nvim:verify-vsc-actions], silent: true }
