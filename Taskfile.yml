version: "3"

vars:
  SCRIPT_HEADER: |
    #!/usr/bin/env bash
    source ./hack/lib/logger.sh
    UUID=$(uuidgen)
    log_info "Task ID: $UUID"

  LOG_DIR: "/tmp/log"
  LOG_PREFIX: "$UUID-sysinit"

  START_MSG_TEMPLATE: "{{.TASK}}..."
  SUCCESS_MSG_TEMPLATE: "{{.TASK}} completed successfully"

  ERROR_TEMPLATE: |
    log_error "Failed. See log: ${LOG_FILE}"
    exit 1

  GREY_COLOR: "\033[90m"
  RESET_COLOR: "\033[0m"

  TAIL_LOG_FUNCTION: |
    function tail_log() {
      local log_file="$1"
      (tail -f "$log_file" | sed "s/^/{{.GREY_COLOR}}/" | sed "s/$/{{.RESET_COLOR}}/" &)
      TAIL_PID=$!
    }
    
    function stop_tail() {
      if [ -n "$TAIL_PID" ]; then
        kill $TAIL_PID 2>/dev/null || true
      fi
    }

tasks:
  default:
    cmds:
      - task -l
    desc: Show help information
    silent: true

  nix:build:
    vars:
      TASK: "Building system configuration"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-build.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        LOG_FILE="{{.LOG_FILE}}"
        mkdir -p "$(dirname "${LOG_FILE}")"
        touch "${LOG_FILE}"
        
        {{.TAIL_LOG_FUNCTION}}
        tail_log "${LOG_FILE}"

        if ! sudo darwin-rebuild switch -v --show-trace --impure --flake . > "${LOG_FILE}" 2>&1; then
          stop_tail
          {{.ERROR_TEMPLATE}}
        fi

        stop_tail
        log_info "Log file: ${LOG_FILE}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Build the configuration without applying
    silent: true

  nix:clean:
    vars:
      TASK: "Running garbage collection"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-clean.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        LOG_FILE="{{.LOG_FILE}}"
        mkdir -p "$(dirname "${LOG_FILE}")"
        touch "${LOG_FILE}"
        
        {{.TAIL_LOG_FUNCTION}}
        tail_log "${LOG_FILE}"

        if ! sudo nix-collect-garbage -d > "${LOG_FILE}" 2>&1; then
          stop_tail
          {{.ERROR_TEMPLATE}}
        fi

        stop_tail
        log_info "Log file: ${LOG_FILE}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Run garbage collection
    silent: true

  nix:refresh:
    deps: [nix:update:flake]
    vars:
      TASK: "Applying system configuration"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-refresh.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        LOG_FILE="{{.LOG_FILE}}"
        mkdir -p "$(dirname "${LOG_FILE}")"
        touch "${LOG_FILE}"
        
        {{.TAIL_LOG_FUNCTION}}
        tail_log "${LOG_FILE}"

        git add -A > "${LOG_FILE}" 2>&1
        git commit -m "chore: update configuration and regenerate lockfile" >> "${LOG_FILE}" 2>&1 || true
        git push >> "${LOG_FILE}" 2>&1 || true

        if ! sudo darwin-rebuild switch --flake . --show-trace >> "${LOG_FILE}" 2>&1; then
          stop_tail
          {{.ERROR_TEMPLATE}}
        fi

        stop_tail
        log_info "Log file: ${LOG_FILE}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Apply the system configuration
    silent: true

  nix:refresh:work:
    vars:
      TASK: "Refreshing work configuration"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-work-refresh.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        LOG_FILE="{{.LOG_FILE}}"
        mkdir -p "$(dirname "${LOG_FILE}")"
        touch "${LOG_FILE}"
        
        {{.TAIL_LOG_FUNCTION}}
        tail_log "${LOG_FILE}"

        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "$WORK_SYSINIT" ]; then
          stop_tail
          log_error "Could not find work sysinit repository"
          {{.ERROR_TEMPLATE}}
        fi

        cd "$WORK_SYSINIT"
        if ! task nix:refresh >> "${LOG_FILE}" 2>&1; then
          stop_tail
          {{.ERROR_TEMPLATE}}
        fi

        stop_tail
        log_info "Log file: ${LOG_FILE}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Update and rebuild work sysinit configuration
    silent: true

  nix:update:flake:
    vars:
      TASK: "Updating flake inputs"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-flake-update.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        LOG_FILE="{{.LOG_FILE}}"
        mkdir -p "$(dirname "${LOG_FILE}")"
        touch "${LOG_FILE}"
        
        {{.TAIL_LOG_FUNCTION}}
        tail_log "${LOG_FILE}"

        if ! sudo nix flake update > "${LOG_FILE}" 2>&1; then
          stop_tail
          {{.ERROR_TEMPLATE}}
        fi

        stop_tail
        log_info "Log file: ${LOG_FILE}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Update flake inputs
    silent: true

  nix:install:nix:
    vars:
      TASK: "Installing prerequisites"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-install.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        LOG_FILE="{{.LOG_FILE}}"
        mkdir -p "$(dirname "${LOG_FILE}")"
        touch "${LOG_FILE}"
        
        {{.TAIL_LOG_FUNCTION}}
        tail_log "${LOG_FILE}"

        if ! sudo ./hack/install-deps.sh > "${LOG_FILE}" 2>&1; then
          stop_tail
          {{.ERROR_TEMPLATE}}
        fi

        stop_tail
        log_info "Log file: ${LOG_FILE}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Install prerequisites for sysinit
    silent: true

  nix:uninstall:nix:
    vars:
      TASK: "Uninstalling Nix"
      LOG_FILE: "{{.LOG_DIR}}/{{.LOG_PREFIX}}-uninstall.log"
    cmds:
      - |
        {{.SCRIPT_HEADER}}
        log_info "{{.START_MSG_TEMPLATE}}"
        LOG_FILE="{{.LOG_FILE}}"
        mkdir -p "$(dirname "${LOG_FILE}")"
        touch "${LOG_FILE}"
        
        {{.TAIL_LOG_FUNCTION}}
        tail_log "${LOG_FILE}"

        if ! sudo ./hack/uninstall-deps.sh > "${LOG_FILE}" 2>&1; then
          stop_tail
          {{.ERROR_TEMPLATE}}
        fi

        stop_tail
        log_info "Log file: ${LOG_FILE}"
        log_success "{{.SUCCESS_MSG_TEMPLATE}}"
    desc: Completely uninstall Nix from the system
    silent: true

  nvim:run-local-headless-isolated:
    cmds:
      - task -d modules/darwin/home/neovim nvim:run-local-headless-isolated
    silent: true

  nvim:run-local-isolated:
    cmds:
      - task -d modules/darwin/home/neovim nvim:run-local-isolated
    silent: true