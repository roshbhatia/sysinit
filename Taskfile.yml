version: "3"

includes:
  nix:
    taskfile: ./tasks/nix.yml
    optional: true
  format:
    taskfile: ./tasks/format.yml
    optional: true

vars:
  NIXPKGS_ALLOW_UNFREE: 1
  NIX_DARWIN_REBUILD: "darwin-rebuild"
  LOGGER_SCRIPT: "hack/lib/logger.sh"
  FD_EXCLUDE_PATTERNS: "-E result"
  WORK_REPO_PATH: "~/github/work"
  NIXFMT_WIDTH: 100
  SHFMT_OPTS: "-i 2 -ci -sr -kp -fn -w"
  NIX_CUSTOM_CONF: "nix.custom.conf"
  NIX_SYSTEM_CONF_DIR: "/etc/nix"
  NIX_MAX_JOBS: 2
  NIX_CORES: 2

  ERROR_EXIT_CODE: 1
  SUCCESS_EXIT_CODE: 0

tasks:
  default:
    desc: Show all available tasks
    cmds:
      - task --list-all
    silent: true

  # Work-specific tasks that remain in main Taskfile
  nix:build:work:
    cmds:
      - |
        #!/usr/bin/env bash
        source {{.LOGGER_SCRIPT}}
        log_info "Building work system configuration"
        WORK_SYSINIT=$(find {{.WORK_REPO_PATH}} -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "${WORK_SYSINIT}" ]; then
          log_error "Could not find work sysinit repository"
          exit {{.ERROR_EXIT_CODE}}
        fi
        cd "${WORK_SYSINIT}"
        if ! NIX_MAX_JOBS=1 NIX_CORES=1 task nix:build:work; then
          log_error "Work build failed."
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Work build completed successfully"
    desc: Build the work sysinit configuration without applying
    silent: true

  nix:refresh:work:
    cmds:
      - |
        #!/usr/bin/env bash
        source {{.LOGGER_SCRIPT}}
        log_info "Building work system configuration"
        WORK_SYSINIT=$(find {{.WORK_REPO_PATH}} -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "${WORK_SYSINIT}" ]; then
          log_error "Could not find work sysinit repository"
          exit {{.ERROR_EXIT_CODE}}
        fi
        cd "${WORK_SYSINIT}"
        if ! NIX_MAX_JOBS=1 NIX_CORES=1 task nix:refresh:work; then
          log_error "Refresh failed (see logs above)"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "System configuration applied successfully"
    desc: Apply the system configuration and switch to new generation
    silent: true

  sh:chmod:
    desc: Make all .sh files in the repository executable
    cmds:
      - |
        #!/usr/bin/env bash
        source {{.LOGGER_SCRIPT}}
        log_info "Finding all .sh files and making them executable"
        if ! fd -e sh -x sh -c 'source {{.LOGGER_SCRIPT}} && log_info "Making executable: {}" && chmod +x {}' _; then
          log_error "Failed to make .sh files executable"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "All .sh files are now executable"
    silent: true

  fmt:
    desc: Format all supported file types
    deps: [format:all]
    silent: true

  docs:values:
    desc: Generate and inject values.nix schema documentation into README.md
    cmds:
      - |
        #!/usr/bin/env bash
        source {{.LOGGER_SCRIPT}}
        log_info "Generating values.nix schema documentation"
        if ! ./scripts/generate-values-docs.sh README.md; then
          log_error "Failed to generate values documentation"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Values documentation injected into README.md"
    silent: true
