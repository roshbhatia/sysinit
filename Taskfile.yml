version: '3'

vars:
  LOG_FUNCTIONS: |
    log_info() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ℹ️ INFO] $1"
    }
    log_debug() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [🐛 DEBUG] $1"
    }
    log_error() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [❌ ERROR] $1"
    }
    log_success() {
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] [✅ SUCCESS] $1"
    }

tasks:
  default:
    cmds:
      - task -l
    desc: Show help information
    silent: true

  # System Configuration
  nix:build:
    cmds:
      - |
        {{.LOG_FUNCTIONS}}
        trap 'log_error "Build interrupted"; exit 1' INT
        log_info "Building system configuration..."
        LOG_FILE="/var/log/sysinit-build.log"
        if ! darwin-rebuild build --flake . > "$LOG_FILE" 2>&1; then
          log_error "Build failed. See log: $LOG_FILE"
          exit 1
        fi
        log_info "Log file: $LOG_FILE"
        log_success "Build completed successfully"
    desc: Build the configuration without applying
    silent: true

  nix:clean:
    cmds:
      - |
        {{.LOG_FUNCTIONS}}
        trap 'log_error "Garbage collection interrupted"; exit 1' INT
        log_info "Running garbage collection..."
        LOG_FILE="/var/log/sysinit-clean.log"
        if ! sudo nix-collect-garbage -d > "$LOG_FILE" 2>&1; then
          log_error "Garbage collection failed. See log: $LOG_FILE"
          exit 1
        fi
        log_info "Log file: $LOG_FILE"
        log_success "Garbage collection completed"
    desc: Run garbage collection
    silent: true

  nix:refresh:
    deps: [nix:update:flake]
    cmds:
      - |
        {{.LOG_FUNCTIONS}}
        trap 'log_error "Refresh interrupted"; exit 1' INT
        log_info "Applying system configuration..."
        LOG_FILE="/var/log/sysinit-refresh.log"
        git add -A > "$LOG_FILE" 2>&1
        git commit -m "chore: update configuration and regenerate lockfile" >> "$LOG_FILE" 2>&1 || true
        git push >> "$LOG_FILE" 2>&1 || true
        if ! darwin-rebuild switch --flake . --show-trace >> "$LOG_FILE" 2>&1; then
          log_error "Failed to apply configuration. See log: $LOG_FILE"
          exit 1
        fi
        log_info "Log file: $LOG_FILE"
        log_success "System configuration applied successfully"
    desc: Apply the system configuration
    silent: true

  nix:refresh:work:
    cmds:
      - |
        {{.LOG_FUNCTIONS}}
        trap 'log_error "Work refresh interrupted"; exit 1' INT
        log_info "Refreshing work configuration..."
        LOG_FILE="/var/log/sysinit-work-refresh.log"
        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "$WORK_SYSINIT" ]; then
          log_error "Could not find work sysinit repository"
          exit 1
        fi
        cd "$WORK_SYSINIT"
        nix flake update > "$LOG_FILE" 2>&1
        task refresh >> "$LOG_FILE" 2>&1
        log_info "Log file: $LOG_FILE"
        log_success "Work configuration refreshed successfully"
    desc: Update and rebuild work sysinit configuration
    silent: true

  nix:update:flake:
    cmds:
      - |
        {{.LOG_FUNCTIONS}}
        trap 'log_error "Flake update interrupted"; exit 1' INT
        log_info "Updating flake inputs..."
        LOG_FILE="/var/log/sysinit-flake-update.log"
        if ! nix flake update > "$LOG_FILE" 2>&1; then
          log_error "Failed to update flake. See log: $LOG_FILE"
          exit 1
        fi
        log_info "Log file: $LOG_FILE"
        log_success "Flake inputs updated successfully"
    desc: Update flake inputs
    silent: true

  # System Setup
  nix:install:
    cmds:
      - |
        {{.LOG_FUNCTIONS}}
        trap 'log_error "Install interrupted"; exit 1' INT
        log_info "Installing prerequisites..."
        LOG_FILE="/var/log/sysinit-install.log"
        if ! ./hack/install-deps.sh > "$LOG_FILE" 2>&1; then
          log_error "Setup failed. See log: $LOG_FILE"
          exit 1
        fi
        log_info "Log file: $LOG_FILE"
        log_success "Setup completed"
    desc: Install prerequisites for sysinit
    silent: true

  nix:uninstall:
    cmds:
      - |
        {{.LOG_FUNCTIONS}}
        trap 'log_error "Uninstall interrupted"; exit 1' INT
        log_info "Uninstalling Nix..."
        LOG_FILE="/var/log/sysinit-uninstall.log"
        if ! ./hack/uninstall-nix.sh > "$LOG_FILE" 2>&1; then
          log_error "Uninstall failed. See log: $LOG_FILE"
          exit 1
        fi
        log_info "Log file: $LOG_FILE"
        log_success "Nix uninstalled successfully"
    desc: Completely uninstall Nix from the system
    silent: true

  # Neovim Tasks
  nvim:extract-nvim-commands: { cmds: [task -d modules/darwin/home/neovim nvim:extract-nvim-commands], silent: true }
  nvim:extract-vsc-commands: { cmds: [task -d modules/darwin/home/neovim nvim:extract-vsc-commands], silent: true }
  nvim:pull-docs: { cmds: [task -d modules/darwin/home/neovim nvim:pull-docs], silent: true }
  nvim:run-local-headless-isolated: { cmds: [task -d modules/darwin/home/neovim nvim:run-local-headless-isolated], silent: true }
  nvim:run-local-isolated: { cmds: [task -d modules/darwin/home/neovim nvim:run-local-isolated], silent: true }
  nvim:verify-vsc-commands: { cmds: [task -d modules/darwin/home/neovim nvim:verify-vsc-actions], silent: true }
