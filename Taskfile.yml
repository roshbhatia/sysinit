version: '3'

tasks:
  default:
    desc: Show help information
    cmds:
      - task -l
    silent: true

  # Boostrap and teardown
  setup:
    desc: Install prerequisites for sysinit
    cmds:
      - echo "Installing prerequisites..."
      - ./hack/install-deps.sh
      - echo "Setup completed"
    silent: true

  perms:
    desc: Fix permissions for /nix and home directories using parallel processing
    cmds:
      - |
        echo "Fixing /nix permissions..."
        fd . /nix -t f -t d -E ".DS_Store" -E "*.lock" --owner "!$USER" -x sudo chown -v "$USER:staff" {} \;
        
        echo "Fixing /opt/homebrew permissions..."
        fd . /opt/homebrew -t f -t d -E ".DS_Store" -E "*.lock" --owner "!$USER" -x sudo chown -v "$USER:staff" {} \;

        echo "Fixing home directory permissions..."
        fd . "$HOME" -t f -t d -E ".DS_Store" -E "node_modules" -E ".git" -E "*.lock" --owner "!$USER" -x sudo chown -v "$USER:staff" {} \;
    silent: true

  uninstall-nix:
    desc: Completely uninstall Nix from the system
    cmds:
      - echo "Uninstalling Nix..."
      - ./hack/uninstall-nix.sh
      - echo "Nix uninstalled"
    silent: true

 # Installs
  build:
    desc: Build the configuration without applying
    cmds:
      - echo "Building system configuration..."
      - darwin-rebuild build --flake .
      - echo "Build completed successfully"
    silent: true

  update-flake:
    desc: Update flake inputs
    cmds:
      - echo "Updating flake inputs..."
      - nix flake update
      - echo "Flake inputs updated successfully"
    silent: true

  clean:
    desc: Run garbage collection
    cmds:
      - echo "Running garbage collection..."
      - sudo nix-collect-garbage -d
      - echo "Garbage collection completed"
    silent: true

  refresh:
    desc: Apply the system configuration
    cmds:
      - |
        echo "Updating flake inputs..." && \
        if ! nix flake update; then
          echo "Failed to update flake"
          exit 1
        fi && \
        git add flake.lock && \
        git commit -m "chore(lockfile): regenerate lockfile" || true && \
        git push && \
        echo "Applying system configuration..." && \
        if ! darwin-rebuild switch --flake . --show-trace; then
          echo "Failed to apply configuration"
          exit 1
        fi && \
        echo "System configuration applied successfully"
    silent: true

  refresh-work:
    desc: Update and rebuild work sysinit configuration
    cmds:
      - |
        WORK_SYSINIT=$(find ~/github/work -maxdepth 2 -type d -name "sysinit" 2>/dev/null | head -n 1)
        if [ -z "$WORK_SYSINIT" ]; then
          echo "Could not find work sysinit repository"
          exit 1
        fi
        echo "Refreshing work sysinit at $WORK_SYSINIT"
        cd "$WORK_SYSINIT" && \
        if ! nix flake update; then
          echo "Failed to update flake"
          exit 1
        fi && \
        git add flake.lock && \
        git commit -m "chore(lockfile): regenerate lockfile" || true && \
        git push && \
        if ! nix build; then
          echo "Failed to build configuration"
          exit 1
        fi && \
        if ! ./result/sw/bin/darwin-rebuild switch --flake .#default; then
          echo "Failed to apply configuration"
          exit 1
        fi && \
        echo "Work configuration refreshed successfully"
    silent: true
