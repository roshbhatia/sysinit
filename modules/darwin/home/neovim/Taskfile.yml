version: '3'

tasks:
  default:
    desc: Show help information
    cmds:
      - task -l
    silent: true

  run-local-isolated:
    desc: Run Neovim with local configuration in an isolated environment
    silent: true
    cmds:
      - |
        # Ensure any stray nvim processes are cleaned up
        pkill -f "nvim-test" || true
        
        # Create temp directory
        TMP_DIR=$(mktemp -d /tmp/nvim-test-XXXXXX)
        TMP_CONFIG_DIR="$TMP_DIR/config"
        mkdir -p "$TMP_DIR"/{share,config,state,cache}
        
        # Copy config files
        cp -r "$(pwd)"/* "$TMP_CONFIG_DIR/"
        echo "Running Neovim with isolated config in $TMP_DIR"
        
        # Run nvim with timeout and cleanup
        (NVIM_APPNAME=nvim-test \
        XDG_DATA_HOME="$TMP_DIR/share" \
        XDG_CONFIG_HOME="$TMP_DIR/config" \
        XDG_STATE_HOME="$TMP_DIR/state" \
        XDG_CACHE_HOME="$TMP_DIR/cache" \
        NVIM_LOG_FILE="$TMP_DIR/nvim.log" \
        nvim \
          --cmd "let g:auto_session_enabled = v:false" \
          --cmd "set runtimepath^=$TMP_CONFIG_DIR,$TMP_CONFIG_DIR/lua" \
          -u "$TMP_CONFIG_DIR/init.lua" || \
        (echo "Neovim exited with error. Check $TMP_DIR/nvim.log for details" && false))
        
        # Cleanup temp files unless KEEP_TMP is set
        if [ -z "$KEEP_TMP" ]; then
          rm -rf "$TMP_DIR"
        else
          echo "Keeping temporary files in $TMP_DIR"
        fi

  run-local-headless-isolated:
    desc: Run Neovim with local configuration in an isolated environment (headless)
    silent: true
    cmds:
      - |
        TMP_DIR=$(mktemp -d /tmp/nvim-test-XXXXXX)
        TMP_CONFIG_DIR="$TMP_DIR/config"
        mkdir -p "$TMP_DIR"/{share,config,state,cache}
        cp -r "$(pwd)"/* "$TMP_CONFIG_DIR/"
        echo "Running Neovim with isolated config in $TMP_DIR"
        NVIM_APPNAME=nvim-test \
        XDG_DATA_HOME="$TMP_DIR/share" \
        XDG_CONFIG_HOME="$TMP_DIR/config" \
        XDG_STATE_HOME="$TMP_DIR/state" \
        XDG_CACHE_HOME="$TMP_DIR/cache" \
        nvim --cmd "set runtimepath^=$TMP_CONFIG_DIR,$TMP_CONFIG_DIR/lua" -u "$TMP_CONFIG_DIR/init.lua" --headless

  pull-docs:
    desc: Fetch documentation for all Neovim plugins
    silent: true
    cmds:
      - |
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[0;33m'
        NC='\033[0m' # No Color
        
        NEOVIM_DIR="$(pwd)"
        DOC_DIR="${NEOVIM_DIR}/dependency-docs"
        
        mkdir -p "${DOC_DIR}"
        
        echo -e "${YELLOW}Scanning Lua files for documentation URLs...${NC}"
        
        # Find all Lua files and process them with awk instead of grep
        find "${NEOVIM_DIR}" -type f -name "*.lua" | while read file; do
          # Use awk to find the line with the URL and extract it
          url=$(awk '/-- sysinit\.nvim\.doc-url=/ { 
            match($0, /"[^"]+"/); 
            url = substr($0, RSTART+1, RLENGTH-2); 
            print url; 
            exit; 
          }' "$file")
          
          if [[ -n "$url" ]]; then
            filename=$(basename "$file" .lua)
            echo -e "${GREEN}Found documentation URL in ${filename}: ${url}${NC}"
            
            echo -e "Downloading documentation from ${url}"
            curl -s "${url}" -o "${DOC_DIR}/${filename}.md"
            
            if [[ $? -eq 0 ]]; then
              echo -e "${GREEN}Successfully downloaded documentation for ${filename}${NC}"
            else
              echo -e "${RED}Failed to download documentation for ${filename}${NC}"
            fi
          fi
        done
        
        found=$(find "${DOC_DIR}" -type f -name "*.md" | wc -l)
        count=$(find "${NEOVIM_DIR}" -type f -name "*.lua" | wc -l)
        
        echo -e "${YELLOW}Scanned ${count} files, found ${found} documentation URLs${NC}"
        echo -e "${GREEN}documentation saved to ${DOC_DIR}${NC}"

  verify-vsc-actions:
    desc: Verify that all VSCode actions in our which-key abstraction are listed in the actions.txt
    cmds:
      - |
        set -eu
        WHICH_KEY_LUA="$(pwd)/lua/modules/tools/which-key.lua"
        ACTIONS_FILE="$(pwd)/dependency-docs/actions.txt"
        echo "Extracting VSCode actions from $WHICH_KEY_LUA"
        # Look only for vscode_cmd pattern
        grep -oE 'vscode_cmd *= *"[^"]+"' "$WHICH_KEY_LUA" | sed 's/.*"\([^\"]*\)".*/\1/' | sort -u > .actions_used
        echo "Extracting declared actions from $ACTIONS_FILE"
        sort -u "$ACTIONS_FILE" > .actions_declared
        MISSING=$(comm -23 .actions_used .actions_declared || true)
        if [ -n "$MISSING" ]; then
          echo "Error: Actions used in which-key.lua missing from $ACTIONS_FILE:"
          echo "$MISSING"
          exit 1
        fi
        echo "All VSCode actions in $WHICH_KEY_LUA are declared in $ACTIONS_FILE"
    silent: true

  extract-vsc-commands:
    desc: Extract commands from default-keybindings.json to actions.txt
    dir: '{{.ROOT_DIR}}'
    cmds:
      - |
        sed -n 's/.*"command": "\([^"]*\)".*$/\1/p; s/.*- \([a-zA-Z0-9.]*\)$/\1/p' ./dependency-docs/default-keybindings.json > ./dependency-docs/actions.txt
    silent: true

  extract-nvim-commands:
    desc: Extract all available Neovim commands (built-in, plugin-provided, and user-defined)
    dir: '{{.ROOT_DIR}}'
    cmds:
      - |
        echo "Extracting all Neovim commands..."
        mkdir -p ./dependency-docs
        
        # Create a temporary Lua script to extract commands
        cat > ./tmp_extract_commands.lua << 'EOF'
        -- List built-in commands
        vim.api.nvim_command('redir! > ./dependency-docs/nvim-commands-builtin.txt')
        vim.api.nvim_command('silent! command')
        vim.api.nvim_command('redir END')
        
        -- List user commands
        vim.api.nvim_command('redir! > ./dependency-docs/nvim-commands-user.txt')
        vim.api.nvim_command('silent! command!')
        vim.api.nvim_command('redir END')
        
        -- Use Lua API to get comprehensive command list
        local cmds = {}
        
        -- Collect commands from command line output
        local function collect_from_file(filename)
          local file = io.open(filename, "r")
          if not file then return end
          
          for line in file:lines() do
            local cmd_name = line:match("^%s*([%w]+)")
            if cmd_name and cmd_name:match("^%w") then
              cmds[cmd_name] = true
            end
          end
          file:close()
        end
        
        collect_from_file("./dependency-docs/nvim-commands-builtin.txt")
        collect_from_file("./dependency-docs/nvim-commands-user.txt")
        
        -- Write all unique commands to file
        local result_file = io.open("./dependency-docs/nvim-commands-all.txt", "w")
        if result_file then
          local sorted_cmds = {}
          for cmd, _ in pairs(cmds) do
            table.insert(sorted_cmds, cmd)
          end
          table.sort(sorted_cmds)
          
          for _, cmd in ipairs(sorted_cmds) do
            result_file:write(cmd .. "\n")
          end
          result_file:close()
        end
        
        vim.api.nvim_command('quit')
        EOF
        
        # Run the Lua script in Neovim
        nvim --headless -u NONE -i NONE -n -S ./tmp_extract_commands.lua
        
        # Clean up
        rm ./tmp_extract_commands.lua
        rm ./dependency-docs/nvim-commands-builtin.txt
        rm ./dependency-docs/nvim-commands-user.txt
        mv ./dependency-docs/nvim-commands-all.txt ./dependency-docs/nvim-commands.txt
        
        echo "All Neovim commands extracted to ./dependency-docs/nvim-commands.txt"
    silent: true
