version: '3'

tasks:
  default:
    desc: Show help information
    cmds:
      - task -l
    silent: true

  run-local:
    desc: Run Neovim with local configuration (isolated)
    silent: true
    cmds:
      - |
        nvim -u "$(pwd)/init.lua"

  run-local-headless:
    desc: Run Neovim with local configuration (isolated) (headless)
    silent: true
    cmds:
      - |
        nvim -u "$(pwd)/init.lua" --headless
      
  run-local-isolated:
    desc: Run Neovim with local configuration (isolated)
    silent: true
    cmds:
      - |
        TMP_DIR=$(mktemp -d /tmp/nvim-test-XXXXXX)
        mkdir -p $TMP_DIR/share $TMP_DIR/config $TMP_DIR/state $TMP_DIR/cache
        echo "Running Neovim with config from $(pwd)"
        NVIM_APPNAME=nvim-test \
        XDG_DATA_HOME=$TMP_DIR/share \
        XDG_CONFIG_HOME=$TMP_DIR/config \
        XDG_STATE_HOME=$TMP_DIR/state \
        XDG_CACHE_HOME=$TMP_DIR/cache \
        nvim --cmd "set runtimepath^=$(pwd),$(pwd)/lua" -u "$(pwd)/init.lua"

  run-local-headless-isolated:
    desc: Run Neovim with local configuration (isolated) (headless)
    silent: true
    cmds:
      - |
        TMP_DIR=$(mktemp -d /tmp/nvim-test-XXXXXX)
        mkdir -p $TMP_DIR/share $TMP_DIR/config $TMP_DIR/state $TMP_DIR/cache
        echo "Running Neovim with config from $(pwd)"
        NVIM_APPNAME=nvim-test \
        XDG_DATA_HOME=$TMP_DIR/share \
        XDG_CONFIG_HOME=$TMP_DIR/config \
        XDG_STATE_HOME=$TMP_DIR/state \
        XDG_CACHE_HOME=$TMP_DIR/cache \
        nvim --cmd "set runtimepath^=$(pwd),$(pwd)/lua" -u "$(pwd)/init.lua" --headless

  pull-docs:
    desc: Fetch documentation for all Neovim plugins
    silent: true
    cmds:
      - |
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[0;33m'
        NC='\033[0m' # No Color
        
        NEOVIM_DIR="$(pwd)"
        DOC_DIR="${NEOVIM_DIR}/dependency-docs"
        
        mkdir -p "${DOC_DIR}"
        
        echo -e "${YELLOW}Scanning Lua files for documentation URLs...${NC}"
        
        # Find all Lua files and process them with awk instead of grep
        find "${NEOVIM_DIR}" -type f -name "*.lua" | while read file; do
          # Use awk to find the line with the URL and extract it
          url=$(awk '/-- sysinit\.nvim\.doc-url=/ { 
            match($0, /"[^"]+"/); 
            url = substr($0, RSTART+1, RLENGTH-2); 
            print url; 
            exit; 
          }' "$file")
          
          if [[ -n "$url" ]]; then
            filename=$(basename "$file" .lua)
            echo -e "${GREEN}Found documentation URL in ${filename}: ${url}${NC}"
            
            echo -e "Downloading documentation from ${url}"
            curl -s "${url}" -o "${DOC_DIR}/${filename}.md"
            
            if [[ $? -eq 0 ]]; then
              echo -e "${GREEN}Successfully downloaded documentation for ${filename}${NC}"
            else
              echo -e "${RED}Failed to download documentation for ${filename}${NC}"
            fi
          fi
        done
        
        found=$(find "${DOC_DIR}" -type f -name "*.md" | wc -l)
        count=$(find "${NEOVIM_DIR}" -type f -name "*.lua" | wc -l)
        
        echo -e "${YELLOW}Scanned ${count} files, found ${found} documentation URLs${NC}"
        echo -e "${GREEN}documentation saved to ${DOC_DIR}${NC}"

  verify-vsc-actions:
    desc: Verify that all VSCode actions in our which-key abstraction are listed in the actions.txt
    cmds:
      - |
        set -eu
        WHICH_KEY_LUA="$(pwd)/lua/modules/tools/which-key.lua"
        ACTIONS_FILE="$(pwd)/dependency-docs/actions.txt"
        echo "Extracting VSCode actions from $WHICH_KEY_LUA"
        # Look only for vscode_cmd pattern
        grep -oE 'vscode_cmd *= *"[^"]+"' "$WHICH_KEY_LUA" | sed 's/.*"\([^\"]*\)".*/\1/' | sort -u > .actions_used
        echo "Extracting declared actions from $ACTIONS_FILE"
        sort -u "$ACTIONS_FILE" > .actions_declared
        MISSING=$(comm -23 .actions_used .actions_declared || true)
        if [ -n "$MISSING" ]; then
          echo "Error: Actions used in which-key.lua missing from $ACTIONS_FILE:"
          echo "$MISSING"
          exit 1
        fi
        echo "All VSCode actions in $WHICH_KEY_LUA are declared in $ACTIONS_FILE"
    silent: true

  extract-vsc-commands:
    desc: Extract commands from default-keybindings.json to actions.txt
    dir: '{{.ROOT_DIR}}'
    cmds:
      - |
        sed -n 's/.*"command": "\([^"]*\)".*$/\1/p; s/.*- \([a-zA-Z0-9.]*\)$/\1/p' ./dependency-docs/default-keybindings.json > ./dependency-docs/actions.txt
    silent: true

  extract-nvim-commands:
    desc: Extract Neovim commands to nvim-actions.txt
    dir: '{{.ROOT_DIR}}'
    cmds:
      - |
        echo "Extracting Neovim commands..."
        # Create the directory if it doesn't exist
        mkdir -p ./dependency-docs
        
        # Run nvim in headless mode to extract all commands
        nvim --headless -c "redir! > ./dependency-docs/nvim-actions.txt" -c "silent verbose command" -c "redir END" -c "quit"
        
        # Clean up the output to get just the command names
        sed -i -E '/^[ \t]*$/d; s/^[ \t]*//; s/!.*$//; s/[ \t]+.*$//; /^[[:space:]]*#/d; /^[[:space:]]*$/d' ./dependency-docs/nvim-actions.txt
        
        # Sort and remove duplicates
        sort -u -o ./dependency-docs/nvim-actions.txt ./dependency-docs/nvim-actions.txt
        
        echo "Neovim commands extracted to ./dependency-docs/nvim-actions.txt"
    silent: true

  extract-lua-commands:
    desc: Extract command references from Lua files to lua-actions.txt
    dir: '{{.ROOT_DIR}}'
    cmds:
      - |
        echo "Extracting command references from Lua files..."
        # Create the directory if it doesn't exist
        mkdir -p ./dependency-docs
        
        # Find all Lua files and extract command patterns
        find . -name "*.lua" -type f -exec grep -o "cmd\s*=\s*[\"'][^\"']*[\"']" {} \; | \
          sed -E 's/cmd\s*=\s*["\x27]([^"\x27]*)["\x27]/\1/g' | \
          sort -u > ./dependency-docs/lua-actions.txt
        
        # Also extract vim.cmd calls
        find . -name "*.lua" -type f -exec grep -o "vim\.cmd(\s*[\"'][^\"']*[\"']" {} \; | \
          sed -E 's/vim\.cmd\(\s*["\x27]([^"\x27]*)["\x27]/\1/g' | \
          sort -u >> ./dependency-docs/lua-actions.txt
        
        # Deduplicate
        sort -u -o ./dependency-docs/lua-actions.txt ./dependency-docs/lua-actions.txt
        
        echo "Lua command references extracted to ./dependency-docs/lua-actions.txt"
    silent: true

  extract-all-commands:
    desc: Extract both VSCode, Neovim and Lua commands
    dir: '{{.ROOT_DIR}}'
    cmds:
      - task: extract-vsc-commands
      - task: extract-nvim-commands
      - task: extract-lua-commands
      - |
        echo "All command extractions completed"
    silent: true
