---
tasks:
  default:
    cmds:
      - task -l
    desc: Show help information
    silent: true

  nvim:extract-nvim-commands:
    cmds:
      - |
        echo "Extracting all Neovim commands..."
        mkdir -p ./commands/neovim
        nvim --headless -c 'redir! > /tmp/commands.txt' -c 'silent command' -c 'redir END' -c 'qa!'
        sed -e 's/[|!]//g' -e 's/^[[:space:]]*\([A-Za-z][A-Za-z0-9]*\)[[:space:]].*$/\1/p' -n /tmp/commands.txt | sed '1d' | sed '/^$/d' > ./commands/neovim/actions.txt
    desc: Extract all available Neovim commands
    dir: '{{.ROOT_DIR}}'

  nvim:extract-vsc-commands:
    cmds:
      - |
        mkdir -p ./commands/vscode
        sed -n 's/.*"command": "\([^"]*\)".*$/\1/p; s/.*- \([a-zA-Z0-9.]*\)$/\1/p' ./commands/vscode/default-keybindings.json > ./commands/vscode/actions.txt
    desc: Extract commands from default-keybindings.json to actions.txt
    dir: '{{.ROOT_DIR}}'

  nvim:pull-docs:
    cmds:
      - |
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[0;33m'
        NC='\033[0m'

        NEOVIM_DIR="$(pwd)"
        DOC_DIR="${NEOVIM_DIR}/commands/docs"

        mkdir -p "${DOC_DIR}"

        echo -e "${YELLOW}Scanning Lua files for documentation URLs...${NC}"

        find "${NEOVIM_DIR}" -type f -name "*.lua" | while read file; do
          url=$(awk '/-- sysinit\.nvim\.doc-url=/ { 
            match($0, /"[^"]+"/); 
            url = substr($0, RSTART+1, RLENGTH-2); 
            print url; 
            exit; 
          }' "$file")
          
          if [[ -n "$url" ]]; then
            filename=$(basename "$file" .lua)
            echo -e "${GREEN}Found documentation URL in ${filename}: ${url}${NC}"
            
            echo -e "Downloading documentation from ${url}"
            curl -s "${url}" -o "${DOC_DIR}/${filename}.md"
            
            if [[ $? -eq 0 ]]; then
              echo -e "${GREEN}Successfully downloaded documentation for ${filename}${NC}"
            else
              echo -e "${RED}Failed to download documentation for ${filename}${NC}"
            fi
          fi
        done

        # Combine all documentation for a complete view
        echo -e "${GREEN}Generating combined documentation view...${NC}"
        echo "# Command Documentation" > "${DOC_DIR}/all.md"
        echo "## VSCode Commands" >> "${DOC_DIR}/all.md"
        cat "./commands/out/actions.txt" >> "${DOC_DIR}/all.md"
        echo -e "\n## Neovim Commands" >> "${DOC_DIR}/all.md"
        cat "./commands/neovim/all.txt" >> "${DOC_DIR}/all.md"

        found=$(find "${DOC_DIR}" -type f -name "*.md" | wc -l)
        count=$(find "${NEOVIM_DIR}" -type f -name "*.lua" | wc -l)

        echo -e "${YELLOW}Scanned ${count} files, found ${found} documentation URLs${NC}"
        echo -e "${GREEN}Documentation saved to ${DOC_DIR}${NC}"
    deps: [nvim:extract-vsc-commands, nvim:extract-nvim-commands]
    desc: Fetch documentation for all Neovim plugins
    silent: true

  nvim:run-local-clean:
    cmds:
      - |
        rm -rf "/tmp/nvim-run-local-isolated"
    desc: Clean local Neovim test environment
    silent: true

  nvim:run-local-headless-isolated:
    cmds:
      - |
        NVIM_TMP_DIR="/tmp/nvim-$(date +%s)"
        NVIM_DATA_DIR="/tmp/nvim-run-local-isolated"

        # Create directories
        mkdir -p "$NVIM_TMP_DIR" "$NVIM_DATA_DIR/share" "$NVIM_DATA_DIR/state" "$NVIM_DATA_DIR/cache"

        # Copy config to temporary directory
        cp -r * "$NVIM_TMP_DIR/"

        # Run Neovim headless with the copied config
        XDG_DATA_HOME="$NVIM_DATA_DIR/share" \
        XDG_STATE_HOME="$NVIM_DATA_DIR/state" \
        XDG_CACHE_HOME="$NVIM_DATA_DIR/cache" \
        nvim \
          --cmd "let g:auto_session_enabled = v:false" \
          --cmd "set runtimepath^=$NVIM_TMP_DIR,$NVIM_TMP_DIR/lua" \
          -u "$NVIM_TMP_DIR/init.lua" --headless

        # Clean up tmp directory
        rm -rf "$NVIM_TMP_DIR"
    desc: Run Neovim with local configuration in temporary directory (headless)
    silent: true

  nvim:run-local-isolated:
    cmds:
      - |
        NVIM_TMP_DIR="/tmp/nvim-$(date +%s)"
        NVIM_DATA_DIR="/tmp/nvim-run-local-isolated"

        # Create directories
        mkdir -p "$NVIM_TMP_DIR" "$NVIM_DATA_DIR/share" "$NVIM_DATA_DIR/state" "$NVIM_DATA_DIR/cache"

        # Copy config to temporary directory
        cp -r * "$NVIM_TMP_DIR/"

        # Run Neovim with the copied config
        # Run Neovim headless with the copied config
        # Run Neovim with the copied config
        XDG_DATA_HOME="$NVIM_DATA_DIR/share" \
        XDG_STATE_HOME="$NVIM_DATA_DIR/state" \
        XDG_CACHE_HOME="$NVIM_DATA_DIR/cache" \
        nvim \
          --cmd "let g:auto_session_enabled = v:false" \
          --cmd "set runtimepath^=$NVIM_TMP_DIR,$NVIM_TMP_DIR/lua" \
          -u "$NVIM_TMP_DIR/init.lua"

        # Clean up tmp directory
        rm -rf "$NVIM_TMP_DIR"
    desc: Run Neovim with local configuration in temporary directory
    silent: true

version: '3'
