#!/usr/bin/env zsh
# Converted from core.main/github.sh to standalone executable
# THIS FILE WAS INSTALLED BY SYSINIT. MODIFICATIONS WILL BE OVERWRITTEN UPON UPDATE.
# shellcheck disable=all
function log_warn() {
  echo -e "\033[1;33mWARNING:\033[0m $*" >&2
}

function log_error() {
  echo -e "\033[1;31mERROR:\033[0m $*" >&2
}

function main() {
  if ! command -v goose &> /dev/null; then
    log_error "goose not installed"
    return 1
  fi

  if ! command -v gum &> /dev/null; then
    log_error "gum not installed"
    return 1
  fi

  conventional_commit_rules="""
Conventional commit message must match:

  type(scope?): subject\n\nbody (optional)\n\nfooter (optional)

Where:
- type: feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert
- scope: optional, describes the section
- subject: short summary (max 72 chars, no period)
"""
  commit_regex='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\([^)]+\))?: .{1,72}(\n\n[\s\S]*)?$'

  tries=0
  max_tries=3
  valid_msg=""
  while [[ $tries -lt $max_tries ]]; do
    msg=$(goose run --text "Generate a conventional commit message for my staged changes. ONLY output the commit message, DO NOT print anything else. Rules:\n$conventional_commit_rules" --no-session 2>/dev/null | tail -1)
    if [[ -z "$msg" ]]; then
      log_warn "No commit message generated by goose"
      ((tries++))
      continue
    fi
    echo "$msg" | grep -E "$commit_regex" &>/dev/null
    if [[ $? -eq 0 ]]; then
      valid_msg="$msg"
      break
    else
      log_warn "Generated message does not match Conventional Commit rules. Retrying... ($((tries+1))/$max_tries)"
      echo "$conventional_commit_rules" | gum format --type=markdown || true
      echo "$msg" | gum write --placeholder="Edit commit message to match the rules above..." > /tmp/edited_commit_msg
      edited_msg=$(cat /tmp/edited_commit_msg)
      echo "$edited_msg" | grep -E "$commit_regex" &>/dev/null
      if [[ $? -eq 0 ]]; then
        valid_msg="$edited_msg"
        break
      fi
      ((tries++))
    fi
  done

  if [[ -z "$valid_msg" ]]; then
    log_warn "Failed to generate a valid Conventional Commit message after $max_tries attempts. Using fallback message: 'chore: updates'."
    valid_msg="chore: updates"
  fi

  git commit -m "$valid_msg"
}

main "$@"

