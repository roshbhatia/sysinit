#!/usr/bin/env bash
# shellcheck disable=all
# modules/home/configurations/utils/git-ai-commit

source "$(dirname "$0")/loglib.sh"
if ! command -v opencode &>/dev/null; then
  log_error "opencode not installed"
  exit 1
fi
if ! command -v gum &>/dev/null; then
  log_error "gum not installed"
  exit 1
fi
conventional_commit_rules="""
Conventional commit message must match:

type(scope?): subject\n\nbody (optional)\n\nfooter (optional)

Where:
- type: feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert
- scope: optional, describes the section
- subject: short summary (max 72 chars, no period)
"""
commit_regex='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\([^)]+\))?: .{1,72}(\n\n[\s\S]*)?$'
tries=0
max_tries=3
valid_msg=""
while [[ $tries -lt $max_tries ]]; do
  msg=$(opencode run "Generate a conventional commit message for my staged changes. ONLY output the commit message, DO NOT print anything else. ONLY PRINT THE COMMIT MESSAGE. ONLY PRINT THE COMMIT MESSAGE, NOTHING ELSE. IT SHOULD SATISFY THE REGEX I USE LATER. ONLY PRINT A COMMIT MESSAGE, IN ONE LINE ONLY!!!!!! Rules:\n$conventional_commit_rules" 2>/dev/null | tail -1)
  if [[ -z "$msg" ]]; then
    log_warn "No commit message generated by opencode"
    ((tries++))
    continue
  fi
  echo "$msg" | grep -E "$commit_regex" &>/dev/null
  if [[ $? -eq 0 ]]; then
    valid_msg="$msg"
    break
  else
    log_warn "Generated message does not match Conventional Commit rules. Retrying... ($((tries + 1))/$max_tries)"
    echo "$conventional_commit_rules" | gum format --type=markdown || true
    echo "$msg" | gum write --placeholder="Edit commit message to match the rules above..." >/tmp/edited_commit_msg
    edited_msg=$(cat /tmp/edited_commit_msg)
    echo "$edited_msg" | grep -E "$commit_regex" &>/dev/null
    if [[ $? -eq 0 ]]; then
      valid_msg="$edited_msg"
      break
    fi
    ((tries++))
  fi
done
if [[ -z "$valid_msg" ]]; then
  log_warn "Failed to generate a valid Conventional Commit message after $max_tries attempts. Using fallback message: 'chore: updates'."
  valid_msg="chore: updates"
fi
git commit -m "$valid_msg"
