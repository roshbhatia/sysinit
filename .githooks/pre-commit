#!/usr/bin/env bash

set -euo pipefail

# Source logging library
if [ -f "hack/lib/logger.sh" ]; then
    source hack/lib/logger.sh
else
    # Fallback simple logging
    log_info() { echo -e "\033[0;34m[INFO]\033[0m $*"; }
    log_warn() { echo -e "\033[1;33m[WARN]\033[0m $*" >&2; }
    log_error() { echo -e "\033[1;31m[ERROR]\033[0m $*" >&2; }
    log_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $*"; }
fi

check_command() {
    command -v "$1" >/dev/null 2>&1
}

# Check for required commands
if ! check_command "task"; then
    log_warn "task not found, skipping hooks"
    exit 0
fi

for cmd in "nixfmt" "stylua" "deadnix"; do
    if ! check_command "$cmd"; then
        log_warn "$cmd not found, skipping hooks"
        exit 0
    fi
done

# Auto-fix line endings and whitespace for staged files
log_info "Checking and fixing line endings..."
staged_files=$(git diff --cached --name-only --diff-filter=ACM)
files_fixed=0

if [ -n "$staged_files" ]; then
    for file in $staged_files; do
        if [ -f "$file" ]; then
            file_changed=false

            # Check for CRLF line endings and convert to LF
            if file "$file" | grep -q "CRLF"; then
                log_info "Converting CRLF to LF line endings" file="$file"
                dos2unix "$file" 2>/dev/null || sed -i '' 's/\r$//' "$file"
                file_changed=true
            fi

            # Fix trailing whitespace (except markdown files)
            if [[ ! "$file" =~ \.(md|markdown)$ ]]; then
                if grep -q '[[:space:]]$' "$file"; then
                    log_info "Removing trailing whitespace" file="$file"
                    sed -i '' 's/[[:space:]]*$//' "$file"
                    file_changed=true
                fi
            fi

            # Add final newline if missing
            if [ -s "$file" ] && [ "$(tail -c1 "$file" | wc -l)" -eq 0 ]; then
                log_info "Adding missing final newline" file="$file"
                echo >> "$file"
                file_changed=true
            fi

            # Re-stage the file if it was modified
            if [ "$file_changed" = true ]; then
                git add "$file"
                files_fixed=$((files_fixed + 1))
            fi
        fi
    done
fi

if [ "$files_fixed" -gt 0 ]; then
    log_success "Auto-fixed $files_fixed file(s) for line endings and whitespace"
fi

# Check for dead Nix code
log_info "Checking for dead Nix code..."
nix_files=$(find . -name "*.nix" -type f | grep -v result | head -20)
if [ -n "$nix_files" ]; then
    echo "$nix_files" | xargs deadnix --edit

    # Check if deadnix made any changes
    if ! git diff --quiet --exit-code -- "*.nix"; then
        log_warn "deadnix found and removed dead code. Please review and commit the changes."
        log_info "Modified files:"
        git diff --name-only -- "*.nix"
        exit 1
    fi
fi

# Run formatting tasks
log_info "Running formatting tasks..."
task fmt sh:chmod

log_success "Pre-commit checks passed!"
