# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  SHFMT_OPTS: "-i 2 -ci -bn -s -w"
  ERROR_EXIT_CODE: 1
  SUCCESS_EXIT_CODE: 0
  LOGGING_FUNCTIONS: |
    log_info() { echo -e "\033[0;34m[INFO]\033[0m $*"; }
    log_warn() { echo -e "\033[1;33m[WARN]\033[0m $*" >&2; }
    log_error() { echo -e "\033[1;31m[ERROR]\033[0m $*" >&2; }
    log_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $*"; }

tasks:
  sh:
    desc: Format all shell files using shfmt
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Formatting shell files"
        if ! fd -e sh -e bash -e zsh -x shfmt {{.SHFMT_OPTS}}; then
          log_error "Shell formatting failed"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Shell files formatted successfully"
    silent: true

  lua:
    desc: Format all Lua files using stylua
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Formatting Lua files"
        if ! fd -e lua -x stylua; then
          log_error "Lua formatting failed"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Lua files formatted successfully"
    silent: true

  nix:
    desc: Format all Nix files using nixfmt
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Formatting Nix files"
        if ! fd -e nix -E result -x nixfmt --width=100; then
          log_error "Nix formatting failed"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Nix files formatted successfully"
    silent: true

  all:
    desc: Format all supported file types
    deps: [nix, lua, sh]
    silent: true
