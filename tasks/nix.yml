# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  NIXPKGS_ALLOW_UNFREE: 1
  NIX_DARWIN_REBUILD: "darwin-rebuild"
  NIX_MAX_JOBS: 2
  NIX_CORES: 2
  ERROR_EXIT_CODE: 1
  SUCCESS_EXIT_CODE: 0
  LOGGING_FUNCTIONS: |
    log_info() { echo -e "\033[0;34m[INFO]\033[0m $*"; }
    log_warn() { echo -e "\033[1;33m[WARN]\033[0m $*" >&2; }
    log_error() { echo -e "\033[1;31m[ERROR]\033[0m $*" >&2; }
    log_success() { echo -e "\033[0;32m[SUCCESS]\033[0m $*"; }

tasks:
  fmt:
    desc: Format all Nix files using nixfmt
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Formatting Nix files"
        if ! fd -e nix -E result -x nixfmt --width=100; then
          log_error "Nix formatting failed"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Nix files formatted successfully"
    silent: true

  build:
    desc: Build the system configuration without applying
    silent: true
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Building system configuration"
        if ! NIXPKGS_ALLOW_UNFREE={{.NIXPKGS_ALLOW_UNFREE}} sudo -E {{.NIX_DARWIN_REBUILD}} build -v --flake . --impure --show-trace --print-build-logs --max-jobs "${NIX_MAX_JOBS:-2}" --cores "${NIX_CORES:-2}"; then
          log_error "Build failed (see logs above)"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Build completed successfully"

  clean:
    desc: Clean Nix store and delete old generations
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        nix-collect-garbage -d
    silent: true

  update:
    desc: Update Nix flake inputs and commit lock file
    silent: true
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Updating nix flake inputs"

        # Run flake update without sudo to keep git ownership clean
        if ! nix flake update --show-trace; then
          log_error "Flake update failed (see logs above)"
          exit {{.ERROR_EXIT_CODE}}
        fi

        # Commit the lock file as the actual user
        if git diff --quiet flake.lock; then
          log_info "No changes to flake.lock"
        else
          git add flake.lock
          git commit -m "flake.lock: Update"
          log_info "Committed flake.lock changes"
        fi

        log_success "Flake inputs updated successfully"

  config:
    desc: Copy nix.custom.conf to /etc/nix/ with sudo
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Updating nix configuration"
        if ! sudo cp nix.custom.conf /etc/nix/nix.custom.conf; then
          log_error "Failed to copy nix configuration"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_info "Restarting nix-daemon"
        if ! sudo launchctl kickstart -k system/org.nixos.nix-daemon; then
          log_error "Failed to restart nix-daemon"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "Nix configuration updated successfully"
    silent: true

  refresh:
    desc: Apply the system configuration and switch to new generation
    silent: true
    deps: [update, config]
    cmds:
      - |
        #!/usr/bin/env bash
        set -euo pipefail
        {{.LOGGING_FUNCTIONS}}
        log_info "Applying system configuration"
        if ! NIXPKGS_ALLOW_UNFREE={{.NIXPKGS_ALLOW_UNFREE}} sudo -E {{.NIX_DARWIN_REBUILD}} switch -v --flake . --impure --show-trace --print-build-logs --max-jobs "${NIX_MAX_JOBS:-2}" --cores "${NIX_CORES:-2}"; then
          log_error "Refresh failed (see logs above)"
          exit {{.ERROR_EXIT_CODE}}
        fi
        log_success "System configuration applied successfully"
