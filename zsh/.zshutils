#!/usr/bin/env zsh
# shellcheck disable=all

# ghwhoami - Get GitHub username
function ghwhoami() {
    gh auth status -a | grep 'Logged in to github.com account' | awk '{print $7}'
}

# kfzf - Fuzzy find and describe k8s resources
function kfzf() {
  local resource="$1"
  local namespace="${2:-default}"
  local output_format="${3:-describe}"

  if [[ -z "$resource" ]]; then
    resource="pods,deployments,replicasets,statefulsets"
  fi

  local preview_command="kubectl describe {2} {3} -n {1}"
  if [[ "$output_format" == "-oyaml" ]]; then
    preview_command="kubectl get {2} {3} -n {1} -o yaml"
  elif [[ "$output_format" == "-ojson" ]]; then
    preview_command="kubectl get {2} {3} -n {1} -o json"
  fi

  local resources
  resources=$(kubectl get "$resource" --all-namespaces -o custom-columns="Namespace:.metadata.namespace,Kind:.kind,Name:.metadata.name")
  
  echo "$resources" | fzf --ansi --height=100% --preview "$preview_command | bat --color=always" --preview-window=right:50% --preview-window=wrap
}

# kfwd - Forward k8s service ports
function kfwd() {
    function list_services() {
        echo "Listing services..."
        services=$(kubectl get services --all-namespaces -o json | jq -r '.items[] | .metadata.namespace + " > " + .metadata.name + ":" + (.spec.ports[] | .port | tostring)')
        if [[ $? -ne 0 ]]; then
            echo "Failed to list services"
            return 1
        fi

        selected_service=$(echo "$services" | fzf --ansi --height=20)
        if [[ $? -ne 0 ]]; then
            echo "Failed to select service"
            return 1
        fi

        if [[ -n "$selected_service" ]]; then
            echo "Selected service: $selected_service"
            namespace=$(echo "$selected_service" | awk -F' > ' '{print $1}')
            service=$(echo "$selected_service" | awk -F' > ' '{print $2}' | awk -F':' '{print $1}')
            port=$(echo "$selected_service" | awk -F':' '{print $2}')
            echo "Namespace: $namespace, Service: $service, Port: $port"
            forward_service "$namespace" "$service" "$port"
        else
            echo "No service selected."
        fi
    }

    function forward_service() {
        local namespace=$1
        local service=$2
        local port=$3
        local kill_flag=false
        local restart_flag=false

        echo "Forwarding service: Namespace=$namespace, Service=$service, Port=$port"

        while getopts "kr" opt; do
            case $opt in
                k)
                    kill_flag=true
                    ;;
                r)
                    restart_flag=true
                    kill_flag=true
                    ;;
                *)
                    echo "Invalid option: -$OPTARG" >&2
                    return 1
                    ;;
            esac
        done

        if $kill_flag; then
            echo "Killing existing port-forward..."
            pkill -f "kubectl port-forward service/$service -n $namespace"
            if [[ $? -ne 0 ]]; then
                echo "Failed to kill existing port-forward"
                return 1
            fi
        fi

        if $restart_flag || ! $kill_flag; then
            echo "Starting port-forward..."
            kubectl port-forward service/$service -n $namespace $port:$port &> /dev/null &
            if [[ $? -ne 0 ]]; then
                echo "Failed to start port-forward"
                return 1
            fi
            sleep 4  # Give port-forwarding some time to establish
            echo "Opening http://localhost:$port"
            open http://localhost:$port
            if [[ $? -ne 0 ]]; then
                echo "Failed to open browser"
                return 1
            fi
        fi
    }

    function show_help() {
        echo "Usage: kfwd {list|l|f|forward|h|help} [OPTIONS]"
        echo
        echo "Commands:"
        echo "  list, l          List all services and their ports"
        echo "  f, forward       Forward the selected service"
        echo "  h, help          Show this help message"
        echo
        echo "Options:"
        echo "  -k               Kill the existing port-forward"
        echo "  -r               Restart the port-forward"
    }

    case "$1" in
        list|l)
            list_services
            ;;
        f|forward)
            shift
            forward_service "$@"
            ;;
        h|help)
            show_help
            ;;
        *)
            list_services
            ;;
    esac
}

# kellog - Tail k8s logs using stern
function kellog() {
  function show_help() {
    echo "Usage: kellog [-h|--help] [-n|--namespace NAMESPACE] [-m|--minimal]"
    echo "Tail logs from a Kubernetes pod using stern."
    echo "  -h, --help                Show this help message."
  }

  function list_deployments() {
    local deployments
    deployments=$(kubectl get deployments --all-namespaces -o custom-columns=NAME:.metadata.name,NAMESPACE:.metadata.namespace --no-headers | sort)
    selected_deployment=$(echo "$deployments" | while read -r deployment; do
        name=$(echo "$deployment" | awk '{print $1}')
        namespace=$(echo "$deployment" | awk '{print $2}')
        echo -e "$name ($namespace)"
    done | fzf --ansi --height=20)

    if [[ -n "$selected_deployment" ]]; then
        deployment_name=$(echo "$selected_deployment" | awk '{print $1}')
        namespace=$(echo "$selected_deployment" | awk -F '[()]' '{print $2}')
        stern -n "$namespace" "$deployment_name" "${args[@]}"
    fi
  }

  local namespace="default"
  local minimal=false
  local args=()

  if [[ "$#" -eq 0 ]]; then
    list_deployments
    return 0
  fi

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        show_help
        return 0
        ;;
      *)
        show_help
        return 1
        ;;
    esac
  done
}

# crepo - Navigate git repositories
function crepo() {
    REPO_BASE=~/github

    function list_repos() {
        repos=$(find "$REPO_BASE" -mindepth 2 -maxdepth 2 -type d ! -name ".*" | sort)
        selected_repo=$(echo "$repos" | while read -r repo; do
            org=$(basename "$(dirname "$repo")")
            name=$(basename "$repo")
            echo -e "$name ($org)"
        done | fzf --ansi --height=20)

        if [[ -n "$selected_repo" ]]; then
            repo_name=$(echo "$selected_repo" | awk '{print $1}')
            change_dir "$repo_name"
        fi
    }

    function change_dir() {
        target_repo=$1
        repos=$(find "$REPO_BASE" -mindepth 2 -maxdepth 2 -type d -name "$target_repo" ! -name ".*")
        target_path=$(echo "$repos" | head -n 1)
        if [[ -d "$target_path" ]]; then
            pushd "$target_path" || return
            echo "Changed directory to $target_path"
        else
            echo "Repository $target_repo not found."
        fi
    }

    function show_help() {
        echo "Usage: crepo {list|l|d|cd|h|help} [REPO_NAME]"
        echo
        echo "Commands:"
        echo "  list, l          List all repositories and their organizations"
        echo "  d, cd [REPO_NAME] Change directory to the specified repository"
        echo "  h, help          Show this help message"
    }

    case "$1" in
        list|l)
            list_repos
            ;;
        d|cd)
            if [[ -z "$2" ]]; then
                echo "Please provide a repository name."
            else
                change_dir "$2"
            fi
            ;;
        h|help)
            show_help
            ;;
        *)
            list_repos
            ;;
    esac
}
